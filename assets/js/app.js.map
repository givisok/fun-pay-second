{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["var App = App || {};\n\n(function (App, $) {\n    /**\n     * Insert html with animation or not :)\n     * @param data\n     * @param animate - bool show with animation\n     * @returns {jQuery}\n     */\n    $.fn.putHtml = function (data, animate) {\n        var currentObject = this;\n        if (animate) {\n            var promise = currentObject.fadeOut(400).promise();\n            promise.done(function () {\n                currentObject.html(data);\n                currentObject.fadeIn(400);\n            });\n        } else {\n            currentObject.html(data);\n        }\n\n        return this;\n    };\n\n    App.debug = true;//false for production\n    App.modal = function () {\n        var modalSelector, modalHeader, modalBody, modalFooter, modalContent;\n\n        $(document).ready(function () {\n            modalSelector = $('#test-modal');\n            modalContent = modalSelector.find('.modal-content');\n            modalHeader = modalSelector.find('#test-modal-header');\n            modalBody = modalSelector.find('.modal-body');\n            modalFooter = modalSelector.find('.modal-footer');\n\n            modalSelector.on('hidden.bs.modal', function () {\n                modalHeader.html('');\n                modalBody.html('');\n                modalContent.removeClass().addClass('modal-content');\n            })\n        });\n\n        return {\n            show: function () {\n                modalSelector.modal('show');\n            },\n\n            hide: function () {\n                modalSelector.modal('hide');\n            },\n\n            setBody: function (data) {\n                modalBody.putHtml(data, true);\n            },\n\n            setHeader: function (data) {\n                modalHeader.html(data);\n            },\n\n            setFooter: function (data) {\n                modalFooter.html(data);\n            },\n\n            showPreLoader: function () {\n                var preLoader = '<div class=\"row\"><div class=\"center-block col-md-2 pre-loader-center\"><img src=\"images/ajax-loader.gif\"></div></div>';\n                modalBody.html(preLoader);\n            },\n\n            setError: function (errorText) {\n                App.modal.setHeader('Error');\n                modalContent.addClass('modal-error');\n                var errorMessage = '<div class=\"alert\" role=\"alert\">';\n                errorMessage += '<strong>If the problem persists please contact us support@hell.yeah</strong>';\n                if (App.debug) {\n                    errorMessage += '<br><br>' + errorText;\n                }\n                errorMessage += '</div>';\n                App.modal.setBody(errorMessage);\n            }\n        }\n    }();\n\n    App.test = {\n        testFunction: function (url) {\n            App.modal.setHeader('Loading...');\n            App.modal.showPreLoader(false);\n            App.modal.show();\n\n            try {\n                var request = App.request.make({url: url});\n            } catch (e) {\n                App.modal.setError(e.toString());\n            }\n\n            request.done(function (data) {\n                if (data) {\n                    App.modal.setHeader('Some header');\n                    App.modal.setBody(data);\n                } else {\n                    App.modal.setError('Empty answer!');\n                }\n            });\n\n            request.fail(function (jqXHR, textStatus, errorThrown) {\n                App.modal.setError('Request error:' + jqXHR.status + ' ' + errorThrown);\n            });\n        }\n    };\n\n    App.helpers = {\n        isString: function (value) {\n            return (typeof value === 'string' || value instanceof String);\n        },\n        isObject: function (value) {\n            return (value === Object(value));\n        },\n        setDefaultValue: function (value, defaultValue) {\n            return typeof value !== 'undefined' ? value : defaultValue;\n        }\n    };\n\n    App.request = {\n        /**\n         * @throws error\n         * @param params - ajax params {url, method, data}\n         */\n        make: function (params) {\n            if (!App.helpers.isObject(params)) {\n                throw new TypeError('Bad params type. Wait type object, but ' + typeof params + ' given');\n            }\n\n            if (!App.request.validateUrl(params.url)) {\n                throw new Error('Url invalid');\n            }\n            params.method = App.helpers.setDefaultValue(params.method, 'GET');\n            var availMethods = ['GET', 'POST', 'DELETE', 'PUT'];\n            if (!App.helpers.isString(params.method) || availMethods.indexOf(params.method) === -1) {\n                throw new Error('Method invalid');\n            }\n\n            params.data = App.helpers.setDefaultValue(params.data, {});\n            if (!App.helpers.isObject(params.data)) {\n                throw new TypeError('Bad params type. Wait type object, but ' + typeof params.data + ' given');\n            }\n\n            return $.ajax({\n                url: params.url,\n                method: params.method,\n                data: params.data\n            });\n        },\n\n        /**\n         *\n         * @param url\n         * @returns {boolean}\n         */\n        validateUrl: function (url) {\n            if (!App.helpers.isString(url)) {\n                throw new TypeError('Bad url type. Wait type string, but ' + typeof url + ' given');\n            }\n\n            var urlRegExp = /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi;\n\n            return urlRegExp.test(url);\n        }\n    };\n})(App, jQuery);\n"]}